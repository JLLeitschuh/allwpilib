def libPattern = /\/lib(.+).so$/
def niLibraryArgs = []
def wpiLibraryArgs = []
def niLibraryPath = file('ni-libraries').absolutePath

def niLibraryTree = fileTree(niLibraryPath)
niLibraryTree.include '*.so'
niLibraryTree.exclude '*libwpi*.so'

niLibraryTree.each { lib ->
    def nameMatcher = (lib.path =~ libPattern)
    if (nameMatcher[0].size() > 1) {
        def name = nameMatcher[0][1]
        niLibraryArgs << '-l' + name
    }
}

def wpiLibraryTree = fileTree(niLibraryPath)
wpiLibraryTree.include '*libwpi*.so'

wpiLibraryTree.each { lib ->
    def nameMatcher = (lib.path =~ libPattern)
    if (nameMatcher[0].size() > 1) {
        def name = nameMatcher[0][1]
        wpiLibraryArgs << '-l' + name
    }
}

subprojects {
    apply plugin: 'eclipse'
    repositories {
        mavenCentral()
        mavenLocal()
    }
    plugins.withType(CppPlugin).whenPluginAdded {
        model {
            buildTypes {
                debug
            }
            platforms {
                arm {
                    architecture 'arm'
                    operatingSystem 'linux'
                }
            }
            toolChains {
                gcc(Gcc) {
                    target('arm') {
                        def compilerPrefix = 'arm-frc-linux-gnueabi-'
                        cppCompiler.executable = compilerPrefix + cppCompiler.executable
                        linker.executable = compilerPrefix + linker.executable
                        assembler.executable = compilerPrefix + assembler.executable
                        cppCompiler.withArguments { args ->
                            args << '-std=c++1y' << '-Wformat=2' << '-Wall' << '-Wextra' << '-Werror' << '-pedantic'
                            args << '-Wno-psabi' << '-Wno-unused-parameter' << '-fPIC' << '-O0' << '-g3'
                        }
                    }
                }
            }
        }

        task addNiLibraryLinks << {
            binaries.all {
                linker.args << '-L' + niLibraryPath
                linker.args.addAll(niLibraryArgs)
            }
        }

        task addWpiLibraryLinks << {
            binaries.all {
                linker.args.addAll(wpiLibraryArgs)
            }
        }

        addWpiLibraryLinks.dependsOn addNiLibraryLinks
    }
}


