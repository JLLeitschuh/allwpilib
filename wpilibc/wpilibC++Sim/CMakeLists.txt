cmake_minimum_required(VERSION 2.8)
project(WPILibSim)

include(CheckCXXCompilerFlag)

 macro(filter_valid_compiler_flags)
  foreach(flag ${ARGN})
    CHECK_CXX_COMPILER_FLAG(${flag} R${flag})
    if(${R${flag}})
      set(VALID_CXX_FLAGS "${VALID_CXX_FLAGS} ${flag}")
    endif()
  endforeach()
endmacro()


filter_valid_compiler_flags(-Wno-unused-parameter -pthread -fPIC -fpermissive -D_USE_MATH_DEFINES -DFRC_SIMULATOR /MDd /Z7)


CHECK_CXX_COMPILER_FLAG("-std=c++11" HAS_CPP_11)


if(${HAS_CPP_11})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
endif()

if (WIN32)
  #prevent windows.h from including winsock.h
  add_definitions(-DWIN32_LEAN_AND_MEAN)

  # defines things like M_PI
  add_definitions(-D_USE_MATH_DEFINES)

  # get rid of min max macros on windows
  add_definitions(-DNOMINMAX)

  # Use dynamic linking for boost
  add_definitions(-DBOOST_ALL_DYN_LINK)


  #temporary until we build dlls
  add_definitions(-DBUILDING_STATIC_LIBS)

  # XXX: should be set via CMake variables in configure.bat
  set(PTHREAD_INCLUDE_DIR "C:/Users/peter/gz-ws/pthread-w32/include")
  set(PTHREAD_LIBRARY "C:/Users/peter/gz-ws/pthread-w32/libs/x64/pthreadVC2.lib")
endif()

get_filename_component(HAL_API_INCLUDES ../../hal/include REALPATH)
get_filename_component(NWT_API_INCLUDES ../../networktables/cpp/include REALPATH)

find_package(Boost COMPONENTS system filesystem REQUIRED)
find_package(gazebo REQUIRED)

# on windows we produce .dlls with no prefix
if(WIN32)
  SET(CMAKE_FIND_LIBRARY_PREFIXES "")
  SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
endif()

# also on windows use sprintf_s instead of snprintf
# TODO: find a more permenenant solution
if (WIN32)
  add_definitions(-Dsnprintf=sprintf_s)
endif()

if (WIN32)
  file(GLOB_RECURSE SRC_FILES src/*.cpp
    ../../networktables/cpp/lib/share/*.cpp
    ../../networktables/cpp/lib/WIN32/*.cpp
    ../../hal/lib/Athena/Task.cpp
    ../../hal/lib/Athena/Semaphore.cpp
    ../../hal/lib/Athena/cpp/Synchronized.cpp
  )
else()
  file(GLOB_RECURSE SRC_FILES src/*.cpp
    ../../networktables/cpp/lib/share/*.cpp
    ../../networktables/cpp/lib/Athena/*.cpp
    ../../hal/lib/Athena/Task.cpp
    ../../hal/lib/Athena/Semaphore.cpp
    ../../hal/lib/Athena/cpp/Synchronized.cpp)
endif()

file(GLOB_RECURSE COM_SRC_FILES ../wpilibC++/src/*.cpp)


set (INCLUDE_FOLDERS include
  ../wpilibC++/include
  ../../networktables/cpp/include
  ../../hal/include
  ../../hal/lib/Athena
  ${Boost_INCLUDE_DIR}
  ${GAZEBO_INCLUDE_DIRS})

if (WIN32)
  #these paths will be fixed when a more permenant windows development solution is found
  set(INCLUDE_FOLDERS ${INCLUDE_FOLDERS}
    C:/Users/peter/gz-ws/protobuf-2.6.0-win64-vc12/src
    C:/Users/peter/gz-ws/sdformat/src/win/tinyxml
    C:/Users/peter/gz-ws/FreeImage-vc12-x64-release-debug/Source
    C:/Users/peter/gz-ws/tbb43_20141023oss/include
    ${PTHREAD_INCLUDE_DIR})
endif()

include_directories(${INCLUDE_FOLDERS})

link_directories(${GAZEBO_LIBRARY_DIRS})

if (WIN32)
  add_library(WPILibSim ${SRC_FILES} ${COM_SRC_FILES})
else()
  add_library(WPILibSim SHARED ${SRC_FILES} ${COM_SRC_FILES})
endif()

target_link_libraries(WPILibSim gz_msgs ${PTHREAD_LIBRARY} ${Boost_LIBRARIES} ${GAZEBO_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT}  -fPIC) # NetworkTables

if (WIN32)
  set_target_properties(${project}  PROPERTIES LINK_FLAGS "/DEBUG")
endif()

#copy to eclipse plugin
